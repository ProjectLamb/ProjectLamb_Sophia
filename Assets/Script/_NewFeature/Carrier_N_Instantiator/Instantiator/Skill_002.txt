
public class Skill_002 : MonoBehaviour, ISkillStatAccessible {
    private Player playerRef;
    public int MaxPoolSize;
    public int bucketSize;
    public SKILL_RANK skillRank;


    private IObjectPool<ProjectileObject> ProjectilePoolQ;
    private IObjectPool<ProjectileObject> ProjectilePoolE;
    private IObjectPool<ProjectileObject> ProjectilePoolR;
    private ProjectileObject creatableProjectile;
    
    
    public readonly List<float> DamageRatioQByRank = new List<float> {0.8f, 1f, 1.5f};
    public readonly List<float> DamageRatioEByRank = new List<float> {0.8f, 1f, 1.5f};
    public readonly List<float> DamageRatioRByRank = new List<float> {1.2f, 1.5f, 2f};

    private Stat EfficienceMultiplyer;
    public Stat GetEfficienceMultiplyer() { return this.EfficienceMultiplyer;}

    private void Awake() {
        EfficienceMultiplyer = new Stat(1f, E_NUMERIC_STAT_TYPE.EfficienceMultiplyer, E_STAT_USE_TYPE.Ratio);
    }

    private void OnEnable() {
        ProjectilePoolQ = new ObjectPool<ProjectileObject>(
            () => {
                ProjectileObject concreteProjectile = Instantiate(creatableProjectile);
                concreteProjectile.SetPool(ProjectilePoolQ);
                return concreteProjectile;
            },
            (ProjectileObject projectile) => {
                projectile.SetProjectileSize(bucketSize);
                projectile.SetForwardingAngle(this.transform.rotation);
                projectile.SetDamage(CalculateDamage(SKILL_KEY.Q, skillRank));
                projectile.gameObject.SetActive(true); 
            },
            ReleaseProjectile,
            DestroyProjectile,
            maxSize:MaxPoolSize
        );
        ProjectilePoolE = new ObjectPool<ProjectileObject>(
            () => {
                ProjectileObject concreteProjectile = Instantiate(creatableProjectile);
                concreteProjectile.SetPool(ProjectilePoolE);
                return concreteProjectile;
            },
            (ProjectileObject projectile) => {
                projectile.SetProjectileSize(bucketSize);
                projectile.SetForwardingAngle(this.transform.rotation);
                projectile.SetDamage(CalculateDamage(SKILL_KEY.E, skillRank));
                projectile.gameObject.SetActive(true); 
            },
            ReleaseProjectile,
            DestroyProjectile,
            maxSize:MaxPoolSize
        );
        
        ProjectilePoolR = new ObjectPool<ProjectileObject>(
            () => {
                ProjectileObject concreteProjectile = Instantiate(creatableProjectile);
                concreteProjectile.SetPool(ProjectilePoolR);
                return concreteProjectile;
            },
            (ProjectileObject projectile) => {
                projectile.SetProjectileSize(bucketSize);
                projectile.SetForwardingAngle(this.transform.rotation);
                projectile.SetDamage(CalculateDamage(SKILL_KEY.R, skillRank));
                projectile.gameObject.SetActive(true); 
            },
            ReleaseProjectile,
            DestroyProjectile,
            maxSize:MaxPoolSize
        );
    }

    public void UseQ(){
        var projectile = ProjectilePoolQ.Get();
    }
    public void UseE(){
        var projectile = ProjectilePoolE.Get();
    }
    public void UseR(){
        var projectile = ProjectilePoolR.Get();
    }


    private int CalculateDamage(SKILL_KEY key, SKILL_RANK rank)
    {
        float resByKey = -1;
        switch (key)
        {
            case SKILL_KEY.Q: {resByKey = DamageRatioQByRank[(int)rank]; break;}
            case SKILL_KEY.E: {resByKey = DamageRatioEByRank[(int)rank]; break;}
            case SKILL_KEY.R: {resByKey = DamageRatioRByRank[(int)rank]; break;}
        }
        resByKey *= playerRef.GetStat(E_NUMERIC_STAT_TYPE.Power) * playerRef.GetStat(E_NUMERIC_STAT_TYPE.MeleeRatio);
        return (int)resByKey;
    }

    private void ReleaseProjectile(ProjectileObject projectile) {
        projectile.gameObject.SetActive(false);   
    }

    private void DestroyProjectile(ProjectileObject projectile) {
        Destroy(projectile.gameObject);
    }

}
