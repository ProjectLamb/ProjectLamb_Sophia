//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Script/Entity/Player/PlayerInputActionAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActionAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActionAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActionAsset"",
    ""maps"": [
        {
            ""name"": ""MenuControls"",
            ""id"": ""3b4afa7b-d314-45c9-b9ad-80a74546ad36"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""103c35f2-6db1-4ffa-a1a3-ab644b6cbce1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8c92a817-10a8-4968-b1f9-29c808836b8f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerMeleeControls"",
            ""id"": ""1b3c9763-4e02-45e2-95b7-03fecbec2f37"",
            ""actions"": [
                {
                    ""name"": ""Movements"",
                    ""type"": ""Value"",
                    ""id"": ""b8f222c0-1c09-48c3-b64a-5e6447d7a0f0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""6a91912e-ba1c-4abc-9a15-4a2242790e6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""dcb899f3-bc3e-4ece-8073-016352b40324"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1a9ad6e5-9658-4c8c-96cd-071d69be5282"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3e300313-35d4-4190-8298-91b2a9c6e95d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""729514e3-5595-4a7b-bc9e-0745d959c71a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""98299746-4468-46ad-959d-34f3a064ff69"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6fe3b4f4-5200-4084-b541-66fa512be4a7"",
                    ""path"": ""<SwitchProControllerHID>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepads"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe65b3f6-21de-4388-97e4-f6db63d6a891"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34ec737d-470a-47ed-9473-6f456c0125bd"",
                    ""path"": ""<SwitchProControllerHID>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepads"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerRangerControls"",
            ""id"": ""d527e06e-4d94-4f4c-a0f3-da3314c4956e"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""da560988-8f36-4ccd-a178-28a16eed4278"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f6c1107-b653-4c02-97cb-251d05c36850"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerHackerControls"",
            ""id"": ""63e97cba-f88c-449e-8ae8-d07b14ad56f5"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""14474557-a797-4a07-911f-2db5204820df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b2f68323-5009-4741-8c4c-e131ec7034bc"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FPSSiteContols"",
            ""id"": ""5ac5f679-2246-489a-97a9-6ee54be59055"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""d07e5d44-3fb9-4def-aab1-2a9c0ab3fe49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""395d3d33-9552-4927-b2ac-0c522e75d9eb"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnVehicle"",
            ""id"": ""7cce53b3-94ed-4dc0-981c-f1cc075bf197"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""226209bd-d831-440e-be17-8c0019e42c1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e9f884f7-b3d4-4867-b1a4-9db25db0121e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepads"",
            ""bindingGroup"": ""Gamepads"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MenuControls
        m_MenuControls = asset.FindActionMap("MenuControls", throwIfNotFound: true);
        m_MenuControls_Pause = m_MenuControls.FindAction("Pause", throwIfNotFound: true);
        // PlayerMeleeControls
        m_PlayerMeleeControls = asset.FindActionMap("PlayerMeleeControls", throwIfNotFound: true);
        m_PlayerMeleeControls_Movements = m_PlayerMeleeControls.FindAction("Movements", throwIfNotFound: true);
        m_PlayerMeleeControls_Attack = m_PlayerMeleeControls.FindAction("Attack", throwIfNotFound: true);
        // PlayerRangerControls
        m_PlayerRangerControls = asset.FindActionMap("PlayerRangerControls", throwIfNotFound: true);
        m_PlayerRangerControls_Newaction = m_PlayerRangerControls.FindAction("New action", throwIfNotFound: true);
        // PlayerHackerControls
        m_PlayerHackerControls = asset.FindActionMap("PlayerHackerControls", throwIfNotFound: true);
        m_PlayerHackerControls_Newaction = m_PlayerHackerControls.FindAction("New action", throwIfNotFound: true);
        // FPSSiteContols
        m_FPSSiteContols = asset.FindActionMap("FPSSiteContols", throwIfNotFound: true);
        m_FPSSiteContols_Newaction = m_FPSSiteContols.FindAction("New action", throwIfNotFound: true);
        // OnVehicle
        m_OnVehicle = asset.FindActionMap("OnVehicle", throwIfNotFound: true);
        m_OnVehicle_Newaction = m_OnVehicle.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MenuControls
    private readonly InputActionMap m_MenuControls;
    private List<IMenuControlsActions> m_MenuControlsActionsCallbackInterfaces = new List<IMenuControlsActions>();
    private readonly InputAction m_MenuControls_Pause;
    public struct MenuControlsActions
    {
        private @PlayerInputActionAsset m_Wrapper;
        public MenuControlsActions(@PlayerInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_MenuControls_Pause;
        public InputActionMap Get() { return m_Wrapper.m_MenuControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuControlsActions set) { return set.Get(); }
        public void AddCallbacks(IMenuControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuControlsActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IMenuControlsActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IMenuControlsActions instance)
        {
            if (m_Wrapper.m_MenuControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuControlsActions @MenuControls => new MenuControlsActions(this);

    // PlayerMeleeControls
    private readonly InputActionMap m_PlayerMeleeControls;
    private List<IPlayerMeleeControlsActions> m_PlayerMeleeControlsActionsCallbackInterfaces = new List<IPlayerMeleeControlsActions>();
    private readonly InputAction m_PlayerMeleeControls_Movements;
    private readonly InputAction m_PlayerMeleeControls_Attack;
    public struct PlayerMeleeControlsActions
    {
        private @PlayerInputActionAsset m_Wrapper;
        public PlayerMeleeControlsActions(@PlayerInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movements => m_Wrapper.m_PlayerMeleeControls_Movements;
        public InputAction @Attack => m_Wrapper.m_PlayerMeleeControls_Attack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMeleeControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMeleeControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMeleeControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMeleeControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMeleeControlsActionsCallbackInterfaces.Add(instance);
            @Movements.started += instance.OnMovements;
            @Movements.performed += instance.OnMovements;
            @Movements.canceled += instance.OnMovements;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IPlayerMeleeControlsActions instance)
        {
            @Movements.started -= instance.OnMovements;
            @Movements.performed -= instance.OnMovements;
            @Movements.canceled -= instance.OnMovements;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IPlayerMeleeControlsActions instance)
        {
            if (m_Wrapper.m_PlayerMeleeControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMeleeControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMeleeControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMeleeControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMeleeControlsActions @PlayerMeleeControls => new PlayerMeleeControlsActions(this);

    // PlayerRangerControls
    private readonly InputActionMap m_PlayerRangerControls;
    private List<IPlayerRangerControlsActions> m_PlayerRangerControlsActionsCallbackInterfaces = new List<IPlayerRangerControlsActions>();
    private readonly InputAction m_PlayerRangerControls_Newaction;
    public struct PlayerRangerControlsActions
    {
        private @PlayerInputActionAsset m_Wrapper;
        public PlayerRangerControlsActions(@PlayerInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_PlayerRangerControls_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerRangerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerRangerControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerRangerControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerRangerControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerRangerControlsActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IPlayerRangerControlsActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IPlayerRangerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerRangerControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerRangerControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerRangerControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerRangerControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerRangerControlsActions @PlayerRangerControls => new PlayerRangerControlsActions(this);

    // PlayerHackerControls
    private readonly InputActionMap m_PlayerHackerControls;
    private List<IPlayerHackerControlsActions> m_PlayerHackerControlsActionsCallbackInterfaces = new List<IPlayerHackerControlsActions>();
    private readonly InputAction m_PlayerHackerControls_Newaction;
    public struct PlayerHackerControlsActions
    {
        private @PlayerInputActionAsset m_Wrapper;
        public PlayerHackerControlsActions(@PlayerInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_PlayerHackerControls_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerHackerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerHackerControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerHackerControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerHackerControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerHackerControlsActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IPlayerHackerControlsActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IPlayerHackerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerHackerControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerHackerControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerHackerControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerHackerControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerHackerControlsActions @PlayerHackerControls => new PlayerHackerControlsActions(this);

    // FPSSiteContols
    private readonly InputActionMap m_FPSSiteContols;
    private List<IFPSSiteContolsActions> m_FPSSiteContolsActionsCallbackInterfaces = new List<IFPSSiteContolsActions>();
    private readonly InputAction m_FPSSiteContols_Newaction;
    public struct FPSSiteContolsActions
    {
        private @PlayerInputActionAsset m_Wrapper;
        public FPSSiteContolsActions(@PlayerInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_FPSSiteContols_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_FPSSiteContols; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSSiteContolsActions set) { return set.Get(); }
        public void AddCallbacks(IFPSSiteContolsActions instance)
        {
            if (instance == null || m_Wrapper.m_FPSSiteContolsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FPSSiteContolsActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IFPSSiteContolsActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IFPSSiteContolsActions instance)
        {
            if (m_Wrapper.m_FPSSiteContolsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFPSSiteContolsActions instance)
        {
            foreach (var item in m_Wrapper.m_FPSSiteContolsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FPSSiteContolsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FPSSiteContolsActions @FPSSiteContols => new FPSSiteContolsActions(this);

    // OnVehicle
    private readonly InputActionMap m_OnVehicle;
    private List<IOnVehicleActions> m_OnVehicleActionsCallbackInterfaces = new List<IOnVehicleActions>();
    private readonly InputAction m_OnVehicle_Newaction;
    public struct OnVehicleActions
    {
        private @PlayerInputActionAsset m_Wrapper;
        public OnVehicleActions(@PlayerInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_OnVehicle_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_OnVehicle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnVehicleActions set) { return set.Get(); }
        public void AddCallbacks(IOnVehicleActions instance)
        {
            if (instance == null || m_Wrapper.m_OnVehicleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnVehicleActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IOnVehicleActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IOnVehicleActions instance)
        {
            if (m_Wrapper.m_OnVehicleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnVehicleActions instance)
        {
            foreach (var item in m_Wrapper.m_OnVehicleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnVehicleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnVehicleActions @OnVehicle => new OnVehicleActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_GamepadsSchemeIndex = -1;
    public InputControlScheme GamepadsScheme
    {
        get
        {
            if (m_GamepadsSchemeIndex == -1) m_GamepadsSchemeIndex = asset.FindControlSchemeIndex("Gamepads");
            return asset.controlSchemes[m_GamepadsSchemeIndex];
        }
    }
    public interface IMenuControlsActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IPlayerMeleeControlsActions
    {
        void OnMovements(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IPlayerRangerControlsActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IPlayerHackerControlsActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IFPSSiteContolsActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IOnVehicleActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
